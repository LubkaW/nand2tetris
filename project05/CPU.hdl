// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // MSB = inst[15], opcode = 0 = A-instruction, 1 = C-instruction -> negate for A register load
    Not(in=instruction[15], out=opcode);
	Mux16(a=aluOut, b=instruction, sel=opcode, out=aRegisterIn); // A-instruction to A register or output of
    
    // A register -> load if A-instr or C-instr and D1
    Or(a=opcode, b=instruction[5], out=loadA);
    ARegister(in=aRegisterIn, load=loadA, out=aRegisterOut, out[0..14]=addressM); // A register
    
    // D register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegisterOut); // D register
    
    // Compute on A register or Mem[A]
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aRegisterOrMemory); // Switch between A register and inM
    ALU(x=dRegisterOut, y=aRegisterOrMemory, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);
    
    // Write to Mem[A] if C-instruction and d3 bit
    And(a=instruction[15], b=instruction[3], out=writeM);

    // This is eval of all jmps... maybe too complicated :)
    Or(a=zr, b=ng, out=orZrNg);
    Not(in=orZrNg, out=pos);

    And(a=instruction[0], b=pos, out=jgt); 
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jgt, b=jlt, out=jne);
    Or(a=jgt, b=jeq, out=jge);

    And(a=instruction[2], b=instruction[1], out=andjj);
    And(a=instruction[0], b=andjj, out=jump);

    Or(a=jge, b=jle, out=jout1);
    Or(a=jne, b=jeq, out=jout2);
    Or(a=jout1, b=jout2, out=jout3);
    Or(a=jump, b=jout3, out=jmpOutAlm);
    And(a=instruction[15], b=jmpOutAlm, out=jmpOut);

    PC(in=aRegisterOut, load=jmpOut, inc=true, reset=reset, out[0..14]=pc);
    
}